# ==================================================
# ü§ñ ROB√î LOSS CURTO ‚Äî VERS√ÉO DUR√ÅVEL
# ==================================================
# services/robots/robot_loss_curto.py
# -*- coding: utf-8 -*-
import time
import datetime
from zoneinfo import ZoneInfo
from core.state import carregar_estado_duravel, salvar_estado_duravel
from core.prices import obter_preco_atual
from core.notifications import enviar_alerta

# ==================================================
# ‚öôÔ∏è CONFIGURA√á√ïES
# ==================================================
TZ = ZoneInfo("Europe/Lisbon")
HORARIO_INICIO_PREGAO = datetime.time(14, 0, 0)
HORARIO_FIM_PREGAO = datetime.time(21, 0, 0)
INTERVALO_VERIFICACAO = 300       # 5 minutos
TEMPO_ACUMULADO_MAXIMO = 1500     # 25 minutos

# ==================================================
# üïí FUN√á√ïES DE TEMPO
# ==================================================
def agora_lx():
    return datetime.datetime.now(TZ)

def dentro_pregao(dt):
    t = dt.time()
    return HORARIO_INICIO_PREGAO <= t <= HORARIO_FIM_PREGAO

def segundos_ate_abertura(dt):
    abre = dt.replace(hour=HORARIO_INICIO_PREGAO.hour, minute=0, second=0, microsecond=0)
    fecha = dt.replace(hour=HORARIO_FIM_PREGAO.hour, minute=0, second=0, microsecond=0)
    if dt < abre:
        return int((abre - dt).total_seconds()), abre
    elif dt > fecha:
        prox = abre + datetime.timedelta(days=1)
        return int((prox - dt).total_seconds()), prox
    else:
        return 0, abre

def formatar_duracao(segundos):
    return str(datetime.timedelta(seconds=int(segundos)))

# ==================================================
# üöÄ INICIALIZA√á√ÉO
# ==================================================
print("ü§ñ Rob√¥ LOSS CURTO iniciado.")
estado = carregar_estado_duravel("loss_curto")

if not isinstance(estado, dict):
    estado = {}

estado.setdefault("ativos", [])
estado.setdefault("tempo_acumulado", {})
estado.setdefault("em_contagem", {})
estado.setdefault("status", {})
estado.setdefault("historico_alertas", [])
estado.setdefault("ultima_data_abertura_enviada", None)
estado.setdefault("eventos_enviados", {})

# garante compatibilidade da data
try:
    if isinstance(estado["ultima_data_abertura_enviada"], datetime.date):
        estado["ultima_data_abertura_enviada"] = estado["ultima_data_abertura_enviada"].isoformat()
    elif not isinstance(estado["ultima_data_abertura_enviada"], str):
        estado["ultima_data_abertura_enviada"] = None
except Exception:
    estado["ultima_data_abertura_enviada"] = None

print(f"üì¶ {len(estado['ativos'])} ativos carregados.")
print("=" * 60)

# ==================================================
# üîÅ LOOP PRINCIPAL
# ==================================================
while True:
    now = agora_lx()

    if dentro_pregao(now):
        data_hoje = str(now.date())
        ultima = str(estado.get("ultima_data_abertura_enviada", ""))

        # üîí Envia mensagem de abertura 1x por dia
        if ultima != data_hoje:
            enviar_alerta(
                "loss_curto",
                "üì£ Preg√£o Aberto",
                "<b>üõë O preg√£o foi iniciado!</b><br><i>O rob√¥ LOSS CURTO est√° monitorando stops de encerramento.</i>",
                "üõë Rob√¥ LOSS CURTO ativo ‚Äî Preg√£o Aberto!"
            )
            estado["ultima_data_abertura_enviada"] = data_hoje
            salvar_estado_duravel("loss_curto", estado)
            print(f"[{now.strftime('%H:%M:%S')}] üì£ Mensagem de abertura enviada ({data_hoje}).\n")

        print(f"[{now.strftime('%H:%M:%S')}] üü¢ Monitorando {len(estado['ativos'])} ativos (LOSS)...")

        tickers_para_remover = []

        for ativo in estado["ativos"]:
            ticker = ativo["ticker"]
            preco_alvo = ativo["preco"]
            operacao = ativo["operacao"]
            tk_full = f"{ticker}.SA" if not ticker.endswith(".SA") else ticker

            try:
                preco_atual = obter_preco_atual(tk_full)
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao obter pre√ßo de {ticker}: {e}")
                continue

            if not preco_atual or preco_atual <= 0:
                print(f"‚ö†Ô∏è Pre√ßo inv√°lido para {ticker}. Pulando...")
                continue

            # üí° Condi√ß√£o de STOP (zona inversa)
            condicao = (
                (operacao == "compra" and preco_atual >= preco_alvo)
                or (operacao == "venda" and preco_atual <= preco_alvo)
            )

            # -----------------------------
            # BLOCO DE CONTAGEM
            # -----------------------------
            if condicao:
                estado["status"][ticker] = "üü° Em contagem"

                if not estado["em_contagem"].get(ticker, False):
                    estado["em_contagem"][ticker] = True
                    estado["tempo_acumulado"][ticker] = 0
                    print(f"‚ö†Ô∏è {ticker} entrou na zona de STOP ({preco_alvo:.2f}). Iniciando contagem...")
                else:
                    estado["tempo_acumulado"][ticker] += INTERVALO_VERIFICACAO
                    print(f"‚åõ {ticker}: {formatar_duracao(estado['tempo_acumulado'][ticker])} acumulados.")

                # üöÄ Disparo do ENCERRAMENTO
                if estado["tempo_acumulado"][ticker] >= TEMPO_ACUMULADO_MAXIMO:
                    event_id = f"loss_curto|{ticker}|{operacao}|{preco_alvo:.2f}|{now.date()}"
                    if estado["eventos_enviados"].get(event_id):
                        print(f"üîÅ {ticker}: encerramento j√° enviado hoje. Ignorando.")
                        continue

                    estado["eventos_enviados"][event_id] = True
                    estado["status"][ticker] = "üöÄ Encerrado"

                    msg_operacao_anterior = "COMPRA" if operacao == "venda" else "VENDA A DESCOBERTO"
                    msg_op_encerrar = operacao.upper()
                    ticker_sem_ext = ticker.replace(".SA", "")

                    msg_tg = f"""
üõë <b>ENCERRAMENTO (STOP) ATIVADO!</b>\n\n
<b>Ticker:</b> {ticker_sem_ext}\n\n
<b>Opera√ß√£o anterior:</b> {msg_operacao_anterior}\n\n
<b>Opera√ß√£o para encerrar:</b> {msg_op_encerrar}\n\n
<b>STOP (alvo):</b> R$ {preco_alvo:.2f}\n\n
<b>Pre√ßo atual:</b> R$ {preco_atual:.2f}\n\n
üìä <a href='https://br.tradingview.com/symbols/{ticker_sem_ext}'>Abrir gr√°fico no TradingView</a>\n\n
<em>
COMPLIANCE: Esta mensagem √© uma sugest√£o de ENCERRAMENTO baseada na CARTEIRA CURTO PRAZO.
A execu√ß√£o √© de total decis√£o e responsabilidade do Destinat√°rio.
Esta informa√ß√£o √© CONFIDENCIAL, de propriedade de 1milhao Invest e de seu DESTINAT√ÅRIO t√£o somente.
Se voc√™ N√ÉO for DESTINAT√ÅRIO ou pessoa autorizada a receb√™-lo, N√ÉO PODE usar, copiar, transmitir, retransmitir
ou divulgar seu conte√∫do (no todo ou em partes), estando sujeito √†s penalidades da LEI.
A Lista de A√ß√µes do 1milhao Invest √© devidamente REGISTRADA.
</em>
""".strip()

                    msg_html = f"""
<html>
  <body style="font-family:Arial,sans-serif; background-color:#0b1220; color:#e5e7eb; padding:20px;">
    <h2 style="color:#ef4444;">üõë ENCERRAMENTO (STOP) ATIVADO!</h2>
    <p><b>Ticker:</b> {ticker_sem_ext}</p>
    <p><b>Opera√ß√£o anterior:</b> {msg_operacao_anterior}</p>
    <p><b>Opera√ß√£o para encerrar:</b> {msg_op_encerrar}</p>
    <p><b>STOP (alvo):</b> R$ {preco_alvo:.2f}</p>
    <p><b>Pre√ßo atual:</b> R$ {preco_atual:.2f}</p>
    <p>üìä <a href="https://br.tradingview.com/symbols/{ticker_sem_ext}" style="color:#60a5fa;">Ver gr√°fico no TradingView</a></p>
    <hr style="border:1px solid #ef4444; margin:20px 0;">
    <p style="font-size:11px; line-height:1.4; color:#9ca3af;">
      <b>COMPLIANCE:</b> Esta mensagem √© uma sugest√£o de ENCERRAMENTO baseada na CARTEIRA CURTO PRAZO.<br>
      A execu√ß√£o √© de total decis√£o e responsabilidade do Destinat√°rio.<br>
      Esta informa√ß√£o √© <b>CONFIDENCIAL</b>, de propriedade do Canal 1milhao e de seu DESTINAT√ÅRIO t√£o somente.<br>
      Se voc√™ <b>N√ÉO</b> for DESTINAT√ÅRIO ou pessoa autorizada a receb√™-lo, <b>N√ÉO PODE</b> usar, copiar, transmitir, retransmitir
      ou divulgar seu conte√∫do (no todo ou em partes), estando sujeito √†s penalidades da LEI.<br>
      A Lista de A√ß√µes do Canal 1milhao √© devidamente <b>REGISTRADA.</b>
    </p>
  </body>
</html>
""".strip()

                    enviar_alerta("loss_curto", f"üõë ENCERRAMENTO (STOP) - {ticker}", msg_html, msg_tg)

                    estado["historico_alertas"].append({
                        "hora": now.strftime("%Y-%m-%d %H:%M:%S"),
                        "ticker": ticker,
                        "operacao": operacao,
                        "preco_alvo": preco_alvo,
                        "preco_atual": preco_atual
                    })

                    tickers_para_remover.append(ticker)
                    estado["em_contagem"][ticker] = False
                    estado["tempo_acumulado"][ticker] = 0

            else:
                # Saiu da zona de STOP
                if estado["em_contagem"].get(ticker, False):
                    print(f"‚ùå {ticker} saiu da zona de STOP.")
                    estado["em_contagem"][ticker] = False
                    estado["tempo_acumulado"][ticker] = 0
                    estado["status"][ticker] = "üî¥ Fora do STOP"

        # -----------------------------
        # üßπ LIMPEZA P√ìS-ENCERRAMENTO
        # -----------------------------
        if tickers_para_remover:
            estado["ativos"] = [a for a in estado["ativos"] if a["ticker"] not in tickers_para_remover]
            for t in tickers_para_remover:
                estado["tempo_acumulado"].pop(t, None)
                estado["em_contagem"].pop(t, None)
                estado["status"][t] = "‚úÖ Encerrado (removido)"
            print(f"üßπ Removidos ap√≥s ENCERRAMENTO: {', '.join(tickers_para_remover)}")

        salvar_estado_duravel("loss_curto", estado)
        print("üíæ Estado salvo.\n")
        time.sleep(INTERVALO_VERIFICACAO)

    # ==================================================
    # üö´ FORA DO PREG√ÉO
    # ==================================================
    else:
        faltam, prox = segundos_ate_abertura(now)
        print(
            f"[{now.strftime('%H:%M:%S')}] üü• Preg√£o fechado. Pr√≥ximo em {formatar_duracao(faltam)} (√†s {prox.strftime('%H:%M')})."
        )
        time.sleep(min(faltam, 3600))


